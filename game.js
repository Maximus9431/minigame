let coins = 0;
let clickPower = 1;
let autoclick = false;
let currentCat = 1;
let xp = 0;
let level = 1;
let passiveIncome = 0;
let upgradeLevel = 1; // —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–∫–∞
const xpPerClick = 1;
const xpToNextLevel = () => 10 + (level - 1) * 10;

function getUpgradePrice() {
    return Math.floor(10 * Math.pow(1.5, upgradeLevel - 1));
}

function updateShopUI() {
    document.getElementById('click-level').textContent = upgradeLevel;
    // –æ–±–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    document.getElementById('upgrade-btn').textContent = `Upgrade click (${getUpgradePrice()}ü™ô)`;
    // ...–æ–±–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ...
}

const achievements = [
    { id: 'firstClick', text: 'First click!', icon: 'üêæ', condition: (state) => state.totalClicks >= 1 },
    { id: 'hundredClicks', text: '100 clicks!', icon: 'üíØ', condition: (state) => state.totalClicks >= 100 },
    { id: 'clickMaster', text: 'Click Master: 500 clicks!', icon: 'üëÜ', condition: (state) => state.totalClicks >= 500 },
    { id: 'clickGod', text: 'Click God: 5000 clicks!', icon: 'üñ±Ô∏è', condition: (state) => state.totalClicks >= 5000 },
    { id: 'millionaire', text: 'Millionaire: 10,000 coins!', icon: 'üí∞', condition: (state) => state.coins >= 10000 },
    { id: 'petCollector', text: 'Pet Collector!', icon: 'üê∂', condition: (state) => Object.values(ownedPets).every(Boolean) },
    { id: 'skinCollector', text: 'Skin Collector!', icon: 'üé®', condition: (state) => Object.values(ownedSkins).every(Boolean) },
    { id: 'upgradeGuru', text: 'Upgrade Guru: 20 upgrades!', icon: '‚¨ÜÔ∏è', condition: (state) => state.upgrades >= 20 },
    { id: 'passiveKing', text: 'Passive King: 10/sec!', icon: '‚è≥', condition: (state) => passiveIncome >= 10 },
    { id: 'boosterFan', text: 'Booster Fan: 10 times!', icon: '‚ö°', condition: (state) => state.boostersUsed >= 10 },
    { id: 'autoclickerPro', text: 'Autoclicker Pro: 10 times!', icon: 'ü§ñ', condition: (state) => state.autoclickersUsed >= 10 },
    { id: 'dailyStreak', text: 'Daily Streak: 7 days!', icon: 'üìÖ', condition: (state) => state.dailyStreak >= 7 },
    { id: 'unicornLuck', text: 'Lucky: caught the unicorn!', icon: 'ü¶Ñ', condition: (state) => ownedPets.unicorn },
    { id: 'collectionFull', text: 'Collection Complete!', icon: 'üèÜ', condition: (state) => Object.values(ownedPets).every(Boolean) && Object.values(ownedSkins).every(Boolean) },
    { id: 'legend', text: 'CatClicker Legend: Level 20!', icon: 'üåü', condition: (state) => level >= 20 }
];
let unlockedAchievements = [];

function updateUI() {
    document.getElementById('coin-count').textContent = coins;
}

function showNotification(text) {
    const notif = document.getElementById('notification');
    notif.textContent = text;
    setTimeout(() => notif.textContent = '', 1500);
}

function updateLevelUI() {
    document.getElementById('level').textContent = level;
    const percent = Math.min(100, (xp / xpToNextLevel()) * 100);
    document.getElementById('xp-progress').style.width = percent + 'px';
}

function gainXP(amount) {
    xp += amount;
    while (xp >= xpToNextLevel()) {
        xp -= xpToNextLevel();
        level++;
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å!
    }
    updateLevelUI();
}

function checkAchievements(state) {
    achievements.forEach(a => {
        if (!unlockedAchievements.includes(a.id) && a.condition(state)) {
            unlockedAchievements.push(a.id);
            showAchievement(a.text);
            renderAchievements();
        }
    });
}

function showAchievement(text) {
    const notif = document.getElementById('notification');
    notif.textContent = 'Achievement: ' + text;
    setTimeout(() => { notif.textContent = ''; }, 2500);
}

function renderAchievements() {
    const list = document.getElementById('achievements-list');
    list.innerHTML = '';
    unlockedAchievements.forEach(id => {
        const a = achievements.find(x => x.id === id);
        if (a) {
            const li = document.createElement('li');
            li.textContent = a.text;
            list.appendChild(li);
        }
    });
}

// –ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:
let state = {
    coins: 0,
    totalClicks: 0,
    upgrades: 0,
    boostersUsed: 0,
    autoclickersUsed: 0,
    dailyStreak: 0
    // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
};

let boosterActive = false;
let boosterTimeout = null;
let boosterTimeLeft = 0;
let boosterInterval = null;

function setBoosterActive(active) {
    boosterActive = active;
    document.getElementById('booster-btn').disabled = active;
    if (active) {
        showNotification('Booster activated! x2 money for 30 sec');
    } else {
        showNotification('Booster ended');
    }
}

function updateBoosterTimerUI() {
    const el = document.getElementById('booster-timer');
    if (boosterTimeLeft > 0) {
        el.textContent = `Booster: ${boosterTimeLeft} sec.`;
    } else {
        el.textContent = '';
    }
}

// –ö–ª–∏–∫ –ø–æ –∫–æ—Ç–∏–∫—É
const catImg = document.getElementById('cat-img');

catImg.addEventListener('click', function(e) {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    const rect = catImg.getBoundingClientRect();
    const x = e.clientX - rect.left;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É: –ª–µ–≤–∞—è –∏–ª–∏ –ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
    if (x < rect.width / 2) {
        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚Äî –Ω–∞–∫–ª–æ–Ω –≤–ª–µ–≤–æ
        catImg.style.transform = 'scale(0.96) rotate(-12deg)';
    } else {
        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚Äî –Ω–∞–∫–ª–æ–Ω –≤–ø—Ä–∞–≤–æ
        catImg.style.transform = 'scale(0.96) rotate(12deg)';
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 120 –º—Å
    setTimeout(() => {
        catImg.style.transform = '';
    }, 120);

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—è—É–∫–∞–Ω—å–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (meowEnabled && meowSound) {
        meowSound.currentTime = 0;
        meowSound.play();
    }
    // –í–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (vibrationEnabled && window.navigator.vibrate) {
        window.navigator.vibrate(50); // 50 –º—Å –≤–∏–±—Ä–∞—Ü–∏–∏
    }

    let reward = clickPower;
    if (boosterActive) reward *= 2;
    if (currentPet === 'bird') reward = Math.floor(reward * 1.1);
    coins += reward;
    updateUI();
    gainXP(xpPerClick);
    catImg.classList.add('clicked');
    setTimeout(() => catImg.classList.remove('clicked'), 200);

    // –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –º–æ–Ω–µ—Ç–∫–∞
    const coin = document.createElement('div');
    coin.textContent = `+${reward}`;
    coin.className = 'coin-float';
    coin.style.left = (e.offsetX || 50) + 'px';
    coin.style.top = (e.offsetY || 50) + 'px';
    document.getElementById('cat-area').appendChild(coin);
    setTimeout(() => coin.remove(), 700);

    // –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–ª–∏–∫–µ!
    if (!ownedPets.unicorn && Math.random() < 1/10) { // 1 –∫ 10 ‚Äî –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–Ω—Å
        ownedPets.unicorn = true;
        updatePetsCollection();
        showNotification('Congratulations! You got a rare pet: Unicorn ü¶Ñ');
    }

    state.totalClicks++;
    checkAchievements(state);
    checkSkinsAchievements();
});

// –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–∞
document.getElementById('upgrade-btn').onclick = function() {
    const price = getUpgradePrice();
    if (coins < price) return showNotification('Not enough money!');
    coins -= price;
    clickPower++;
    upgradeLevel++;
    updateShopUI();
    updateUI();
    showNotification('Click upgraded!');
};

function updateUpgradeButton() {
    document.getElementById('upgrade-btn').textContent = `Upgrade click (${getUpgradePrice()}ü™ô)`;
}

let autoclickTimer = null;
let autoclickTimeLeft = 0;
let autoclickTimerInterval = null;

function updateAutoclickTimerUI() {
    const timerDiv = document.getElementById('autoclick-timer');
    if (autoclick && autoclickTimeLeft > 0) {
        timerDiv.textContent = `Autoclicker: ${autoclickTimeLeft} sec.`;
    } else {
        timerDiv.textContent = '';
    }
}

// –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –Ω–∞ –≤—Ä–µ–º—è
document.getElementById('autoclick-btn').onclick = autoSaveWrap(function() {
    if (coins < 50) return showNotification('Not enough money!');
    coins -= 50;
    autoclick = true;
    autoclickTimeLeft = 60; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    updateUI();
    updateAutoclickTimerUI(); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    showNotification('Autoclicker activated for 60 seconds!');
    document.getElementById('autoclick-btn').disabled = true;

    // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (window._autoclickerInterval) clearInterval(window._autoclickerInterval);

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    window._autoclickerInterval = setInterval(() => {
        coins += clickPower;
        updateUI();
        saveGame();
    }, 1000);

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    if (window._autoclickerTimer) clearInterval(window._autoclickerTimer);
    window._autoclickerTimer = setInterval(() => {
        autoclickTimeLeft--;
        updateAutoclickTimerUI();
        if (autoclickTimeLeft <= 0) {
            clearInterval(window._autoclickerInterval);
            clearInterval(window._autoclickerTimer);
            autoclick = false;
            document.getElementById('autoclick-btn').disabled = false;
            updateAutoclickTimerUI();
            showNotification('Autoclicker ended!');
        }
    }, 1000);
});

// –ú–∞–≥–∞–∑–∏–Ω –∫–æ—Ç–∏–∫–æ–≤
document.getElementById('buy-cat2').onclick = autoSaveWrap(function() {
    if (currentCat >= 2) return showNotification('Already purchased!');
    if (coins < 100) return showNotification('Not enough money!');
    coins -= 100;
    currentCat = 2;
    document.getElementById('cat-img').src = 'cat2.png';
    updateUI();
    showNotification('A new cat unlocked!');
});

// –î–æ–Ω–∞—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞)
document.getElementById('buy-cat3').onclick = autoSaveWrap(function() {
    showNotification('Available for donation only!');
});

// –ë—É—Å—Ç–µ—Ä
document.getElementById('booster-btn').onclick = autoSaveWrap(function() {
    if (coins < 100) return showNotification('Not enough money!');
    coins -= 100;
    boosterActive = true;
    boosterTimeLeft = 30; // –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ–∫—É–Ω–¥
    updateUI();
    updateBoosterTimerUI();
    showNotification('Booster x2 activated for 30 seconds!');
    document.getElementById('booster-btn').disabled = true;

    // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –±—ã–ª
    if (boosterInterval) clearInterval(boosterInterval);

    boosterInterval = setInterval(() => {
        boosterTimeLeft--;
        updateBoosterTimerUI();
        if (boosterTimeLeft <= 0) {
            clearInterval(boosterInterval);
            boosterActive = false;
            document.getElementById('booster-btn').disabled = false;
            updateBoosterTimerUI();
            showNotification('Booster ended!');
        }
    }, 1000);
});

// –°–∫–∏–Ω—ã
let ownedSkins = { default: true, gold: false, achieve: false };
let currentSkin = 'default';

function updateCatSkin() {
    let img = 'cat1.png';
    if (currentSkin === 'gold') img = 'cat_gold.png';
    if (currentSkin === 'achieve') img = 'cat_achieve.png';
    document.getElementById('cat-img').src = img;
}

// –ü–æ–∫—É–ø–∫–∞ –∑–æ–ª–æ—Ç–æ–≥–æ —Å–∫–∏–Ω–∞
document.getElementById('skin-gold').onclick = autoSaveWrap(function() {
    if (ownedSkins.gold) {
        currentSkin = 'gold';
        updateCatSkin();
        showNotification('Golden cat selected!');
        return;
    }
    if (coins < 1000) return showNotification('Not enough money!');
    coins -= 1000;
    ownedSkins.gold = true;
    currentSkin = 'gold';
    updateUI();
    updateCatSkin();
    showNotification('Golden cat purchased and selected!');
});

// –û–±—ã—á–Ω—ã–π —Å–∫–∏–Ω
document.getElementById('skin-default').onclick = autoSaveWrap(function() {
    currentSkin = 'default';
    updateCatSkin();
    showNotification('Default cat selected!');
});

// –°–∫–∏–Ω –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
document.getElementById('skin-achieve').onclick = autoSaveWrap(function() {
    if (!ownedSkins.achieve) return showNotification('The skin will unlock after 100 clicks!');
    currentSkin = 'achieve';
    updateCatSkin();
    showNotification('Achievement skin selected!');
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∫–∏–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
function checkSkinsAchievements() {
    if (state.totalClicks >= 100) ownedSkins.achieve = true;
}

// –ü–∏—Ç–æ–º—Ü—ã
let ownedPets = { dog: false, bird: false, cat: false, unicorn: false };
let currentPet = null;

function updatePetInfo() {
    let name = 'no';
    if (currentPet === 'dog') name = 'Dog';
    if (currentPet === 'bird') name = 'Bird';
    if (currentPet === 'cat') name = 'Cat';
    if (currentPet === 'unicorn') name = 'Unicorn';
    document.getElementById('current-pet').textContent = currentPet;
}

function updatePetImage() {
    const petImg = document.getElementById('pet-img');
    if (!currentPet || !ownedPets[currentPet] || currentPet === 'none') {
        petImg.style.display = 'none';
        return;
    }
    // –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è id –ø–∏—Ç–æ–º—Ü–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    const petImages = {
        dog: 'pet_dog.png',
        bird: 'pet_bird.png',
        cat: 'pet_cat.png',
        unicorn: 'pet_unicorn.png'
    };
    petImg.src = petImages[currentPet] || '';
    petImg.alt = currentPet;
    petImg.style.display = 'block';
}

// –ü–æ–∫—É–ø–∫–∞ —Å–æ–±–∞—á–∫–∏
document.getElementById('pet-dog').onclick = autoSaveWrap(function() {
    if (ownedPets.dog) {
        currentPet = 'dog';
        updatePetInfo();
        showNotification('Dog selected!');
        return;
    }
    if (coins < 500) return showNotification('Not enough money!');
    coins -= 500;
    ownedPets.dog = true;
    currentPet = 'dog';
    passiveIncome += 1;
    updateUI();
    updatePassiveUI();
    updatePetInfo();
    updatePetImage();
    showNotification('Dog purchased and selected! +1 passive income');
});

// –ü–æ–∫—É–ø–∫–∞ –ø—Ç–∏—á–∫–∏
document.getElementById('pet-bird').onclick = autoSaveWrap(function() {
    if (ownedPets.bird) {
        currentPet = 'bird';
        updatePetInfo();
        showNotification('Bird selected!');
        return;
    }
    if (coins < 800) return showNotification('Not enough money!');
    coins -= 800;
    ownedPets.bird = true;
    currentPet = 'bird';
    updateUI();
    updatePetInfo();
    updatePetImage();
    showNotification('Bird purchased and selected! +10% to click');
});

// –ü–æ–∫—É–ø–∫–∞ –∫–æ—Ç—ë–Ω–∫–∞
document.getElementById('pet-cat').onclick = autoSaveWrap(function() {
    if (ownedPets.cat) {
        currentPet = 'cat';
        updatePetInfo();
        showNotification('Cat selected!');
        return;
    }
    if (coins < 1200) return showNotification('Not enough money!');
    coins -= 1200;
    ownedPets.cat = true;
    currentPet = 'cat';
    updateUI();
    updatePetInfo();
    updatePetImage();
    showNotification('Cat purchased and selected! +5% to passive income');
});

// –°–Ω—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞
document.getElementById('pet-none').onclick = autoSaveWrap(function() {
    currentPet = null;
    updatePetInfo();
    showNotification('The pet is cleaned up!');
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞:
setInterval(function() {
    let passive = passiveIncome;
    if (currentPet === 'cat') passive = Math.floor(passive * 1.05);
    if (currentPet === 'dog') passive += 1;
    if (currentPet === 'unicorn') passive += 5;
    if (passive > 0) {
        coins += passive;
        updateUI();
        saveGame();
    }
}, 1000);

// –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ ‚Äî 1 –∫ 2000 –∫–ª–∏–∫–æ–≤
if (!ownedPets.unicorn && Math.random() < 1/10) {
    ownedPets.unicorn = true;
    updatePetsCollection();
    showNotification('Congratulations! You got a rare pet: Unicorn ü¶Ñ');
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
function saveGame() {
    const saveData = {
        coins,
        clickPower,
        autoclick,
        currentCat,
        xp,
        level,
        unlockedAchievements,
        state,
        passiveIncome, // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        ownedSkins,
        currentSkin,
        ownedPets,
        currentPet
    };
    localStorage.setItem('catclickerSave', JSON.stringify(saveData));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function loadGame() {
    const data = localStorage.getItem('catclickerSave');
    if (data) {
        const save = JSON.parse(data);
        coins = save.coins ?? 0;
        clickPower = save.clickPower ?? 1;
        autoclick = save.autoclick ?? false;
        currentCat = save.currentCat ?? 1;
        xp = save.xp ?? 0;
        level = save.level ?? 1;
        unlockedAchievements = save.unlockedAchievements ?? [];
        Object.assign(state, save.state || {});
        passiveIncome = save.passiveIncome ?? 0; // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        ownedSkins = save.ownedSkins ?? { default: true, gold: false, achieve: false };
        currentSkin = save.currentSkin ?? 'default';
        ownedPets = save.ownedPets ?? { dog: false, bird: false, cat: false, unicorn: false };
        currentPet = save.currentPet ?? null;
        updateCatSkin();
        updatePetInfo();
        updatePetImage();
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—Ç–∏–∫–∞
        document.getElementById('cat-img').src = `cat${currentCat}.png`;
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –±—ã–ª –∫—É–ø–ª–µ–Ω ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
        if (autoclick && !window._autoclickerStarted) {
            window._autoclickerStarted = true;
            setInterval(() => {
                coins += clickPower;
                updateUI();
                saveGame();
            }, 1000);
        }
    }
    updateUI();
    updateLevelUI();
    renderAchievements();
    updatePassiveUI(); // –¥–æ–±–∞–≤–ª–µ–Ω–æ
    updatePetsCollection();
}

// –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–≥—Ä—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
function autoSaveWrap(fn) {
    return function(...args) {
        const result = fn.apply(this, args);
        saveGame();
        return result;
    }
}

document.getElementById('upgrade-btn').onclick = function() {
    const price = getUpgradePrice();
    if (coins < price) return showNotification('Not enough money!');
    coins -= price;
    clickPower++;
    upgradeLevel++;
    updateShopUI();
    updateUI();
    showNotification('Click upgraded!');
};

document.getElementById('autoclick-btn').onclick = autoSaveWrap(function() {
    if (coins < 50) return showNotification('Not enough money!');
    coins -= 50;
    autoclick = true;
    autoclickTimeLeft = 60; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    updateUI();
    updateAutoclickTimerUI(); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    showNotification('Autoclicker activated for 60 seconds!');
    document.getElementById('autoclick-btn').disabled = true;

    // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (window._autoclickerInterval) clearInterval(window._autoclickerInterval);

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    window._autoclickerInterval = setInterval(() => {
        coins += clickPower;
        updateUI();
        saveGame();
    }, 1000);

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    if (window._autoclickerTimer) clearInterval(window._autoclickerTimer);
    window._autoclickerTimer = setInterval(() => {
        autoclickTimeLeft--;
        updateAutoclickTimerUI();
        if (autoclickTimeLeft <= 0) {
            clearInterval(window._autoclickerInterval);
            clearInterval(window._autoclickerTimer);
            autoclick = false;
            document.getElementById('autoclick-btn').disabled = false;
            updateAutoclickTimerUI();
            showNotification('Autoclicker ended!');
        }
    }, 1000);
});

document.getElementById('buy-cat2').onclick = autoSaveWrap(function() {
    if (currentCat >= 2) return showNotification('Already purchased!');
    if (coins < 100) return showNotification('Not enough money!');
    coins -= 100;
    currentCat = 2;
    document.getElementById('cat-img').src = 'cat2.png';
    updateUI();
    showNotification('A new cat unlocked!');
});

document.getElementById('buy-cat3').onclick = autoSaveWrap(function() {
    showNotification('Available for donation only!');
});

document.getElementById('reset-btn').onclick = function() {
    if (!confirm('Are you sure you want to reset all progress?')) return;

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    coins = 0;
    clickPower = 1;
    autoclick = false;
    currentCat = 1;
    xp = 0;
    level = 1;
    passiveIncome = 0;
    unlockedAchievements = [];
    state = {
        coins: 0,
        totalClicks: 0,
        upgrades: 0,
        boostersUsed: 0,
        autoclickersUsed: 0,
        dailyStreak: 0
    };
    boosterActive = false;
    ownedSkins = { default: true, gold: false, achieve: false };
    currentSkin = 'default';
    ownedPets = { dog: false, bird: false, cat: false, unicorn: false };
    currentPet = null;

    localStorage.clear();
    location.reload();
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
function updatePassiveUI() {
    document.getElementById('passive-value').textContent = passiveIncome;
}

// –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
document.getElementById('passive-btn').onclick = autoSaveWrap(function() {
    if (coins < 25) return showNotification('Not enough money!');
    coins -= 25;
    passiveIncome++;
    updateUI();
    updatePassiveUI();
    showNotification('Passive income has increased!');
});

// –ü–∞—Å—Å–∏–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(function() {
    if (passiveIncome > 0) {
        coins += passiveIncome;
        updateUI();
        saveGame();
    }
}, 1000);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadGame();

if (window.Telegram && Telegram.WebApp) {
    Telegram.WebApp.ready();
    Telegram.WebApp.expand(); // –û—Ç–∫—Ä—ã—Ç—å WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
}

// –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é
function updatePetsCollection() {
    document.getElementById('coll-dog').style.opacity = ownedPets.dog ? '1' : '0.3';
    document.getElementById('coll-bird').style.opacity = ownedPets.bird ? '1' : '0.3';
    document.getElementById('coll-cat').style.opacity = ownedPets.cat ? '1' : '0.3';
    document.getElementById('coll-unicorn').style.opacity = ownedPets.unicorn ? '1' : '0.3';

    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const rewardDiv = document.getElementById('collection-reward');
    if (ownedPets.dog && ownedPets.bird && ownedPets.cat) {
        rewardDiv.textContent = 'The collection is complete! Bonus: +2 to passive income.';
        if (!window._collectionRewardGiven) {
            passiveIncome += 2;
            updatePassiveUI();
            window._collectionRewardGiven = true;
            showNotification('Bonus for collection: +2 to passive income!');
            saveGame();
        }
    } else {
        rewardDiv.textContent = '';
        window._collectionRewardGiven = false;
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.onclick = function() {
        document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        const tab = btn.getAttribute('data-tab');
        document.querySelectorAll('.tab').forEach(t => t.style.display = 'none');
        document.getElementById('tab-' + tab).style.display = 'block';
    }
});
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
document.querySelector('.nav-btn[data-tab="game"]').classList.add('active');
document.getElementById('tab-game').style.display = 'block';

let lastTouchEnd = 0;
document.addEventListener('touchend', function(event) {
    const now = Date.now();
    if (now - lastTouchEnd <= 300) {
        event.preventDefault();
    }
    lastTouchEnd = now;
}, false);

document.addEventListener('gesturestart', function (e) {
    e.preventDefault();
});

// –ü–æ–∫—É–ø–∫–∞/–≤—ã–±–æ—Ä –µ–¥–∏–Ω–æ—Ä–æ–≥–∞
document.getElementById('pet-unicorn').onclick = autoSaveWrap(function() {
    if (!ownedPets.unicorn) return showNotification('First, get the unicorn!');
    currentPet = 'unicorn';
    updatePetInfo();
    updatePetImage();
    updatePassiveUI();
    updateUI();
    updatePetsCollection();
    showNotification('Unicorn selected! +5 to passive income');
});

function fullUpdateUI() {
    updateUI();
    updatePetInfo && updatePetInfo();
    updatePetImage && updatePetImage();
    updatePassiveUI && updatePassiveUI();
    updateCatSkin && updateCatSkin();
    renderPets && renderPets();
    renderSkins && renderSkins();
    renderShop && renderShop();
    renderAchievements && renderAchievements();
}

// –ó–≤—É–∫ –º—è—É–∫–∞–Ω—å—è
const meowSound = document.getElementById('meow-sound');
let meowEnabled = true;

// –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.getElementById('settings-btn').onclick = function() {
    document.getElementById('settings-modal').style.display = 'flex';
    document.getElementById('meow-toggle').checked = meowEnabled;
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.getElementById('close-settings').onclick = function() {
    document.getElementById('settings-modal').style.display = 'none';
};

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–≤—É–∫–∞
document.getElementById('meow-toggle').onchange = function() {
    meowEnabled = this.checked;
};

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
document.getElementById('cat-img').addEventListener('click', function() {
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—è—É–∫–∞–Ω—å–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (meowEnabled && meowSound) {
        meowSound.currentTime = 0;
        meowSound.play();
    }
    // –í–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (vibrationEnabled && window.navigator.vibrate) {
        window.navigator.vibrate(50); // 50 –º—Å –≤–∏–±—Ä–∞—Ü–∏–∏
    }
    // ...–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∏–∫–∞...
});

let vibrationEnabled = true;
document.getElementById('vibration-toggle').onchange = function() {
    vibrationEnabled = this.checked;
};

// –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è upgradeLevel:
function updateShopUI() {
    document.getElementById('click-level').textContent = upgradeLevel;
    // –æ–±–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    document.getElementById('upgrade-btn').textContent = `Upgrade click (${getUpgradePrice()}ü™ô)`;
    // ...–æ–±–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ...
}