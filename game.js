let coins = 0;
let clickPower = 1;
let autoclick = false;
let currentCat = 1;
let xp = 0;
let level = 1;
let passiveIncome = 0;
const xpPerClick = 1;
const xpToNextLevel = () => 10 + (level - 1) * 10;

const achievements = [
    { id: 'firstClick', text: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫!', condition: (state) => state.totalClicks >= 1 },
    { id: 'hundredClicks', text: '100 –∫–ª–∏–∫–æ–≤!', condition: (state) => state.totalClicks >= 100 },
    { id: 'firstUpgrade', text: '–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ!', condition: (state) => state.upgrades >= 1 },
    { id: 'richCat', text: '1000 –º–æ–Ω–µ—Ç!', condition: (state) => state.coins >= 1000 },
];
let unlockedAchievements = [];

function updateUI() {
    document.getElementById('coin-count').textContent = coins;
}

function showNotification(text) {
    const notif = document.getElementById('notification');
    notif.textContent = text;
    setTimeout(() => notif.textContent = '', 1500);
}

function updateLevelUI() {
    document.getElementById('level').textContent = level;
    const percent = Math.min(100, (xp / xpToNextLevel()) * 100);
    document.getElementById('xp-progress').style.width = percent + 'px';
}

function gainXP(amount) {
    xp += amount;
    while (xp >= xpToNextLevel()) {
        xp -= xpToNextLevel();
        level++;
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å!
    }
    updateLevelUI();
}

function checkAchievements(state) {
    achievements.forEach(a => {
        if (!unlockedAchievements.includes(a.id) && a.condition(state)) {
            unlockedAchievements.push(a.id);
            showAchievement(a.text);
            renderAchievements();
        }
    });
}

function showAchievement(text) {
    const notif = document.getElementById('notification');
    notif.textContent = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ' + text;
    setTimeout(() => { notif.textContent = ''; }, 2500);
}

function renderAchievements() {
    const list = document.getElementById('achievements-list');
    list.innerHTML = '';
    unlockedAchievements.forEach(id => {
        const a = achievements.find(x => x.id === id);
        if (a) {
            const li = document.createElement('li');
            li.textContent = a.text;
            list.appendChild(li);
        }
    });
}

// –ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:
let state = {
    coins: 0,
    totalClicks: 0,
    upgrades: 0,
    // ...–¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...
};

let boosterActive = false;
let boosterTimeout = null;

function setBoosterActive(active) {
    boosterActive = active;
    document.getElementById('booster-btn').disabled = active;
    if (active) {
        showNotification('–ë—É—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! x2 –º–æ–Ω–µ—Ç—ã –Ω–∞ 30 —Å–µ–∫');
    } else {
        showNotification('–ë—É—Å—Ç–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è');
    }
}

// –ö–ª–∏–∫ –ø–æ –∫–æ—Ç–∏–∫—É
const catImg = document.getElementById('cat-img');
catImg.addEventListener('click', autoSaveWrap(function(e) {
    let reward = clickPower;
    if (boosterActive) reward *= 2;
    if (currentPet === 'bird') reward = Math.floor(reward * 1.1);
    coins += reward;
    updateUI();
    gainXP(xpPerClick);
    catImg.classList.add('clicked');
    setTimeout(() => catImg.classList.remove('clicked'), 200);

    // –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –º–æ–Ω–µ—Ç–∫–∞
    const coin = document.createElement('div');
    coin.textContent = `+${reward}`;
    coin.className = 'coin-float';
    coin.style.left = (e.offsetX || 50) + 'px';
    coin.style.top = (e.offsetY || 50) + 'px';
    document.getElementById('cat-area').appendChild(coin);
    setTimeout(() => coin.remove(), 700);

    // –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–ª–∏–∫–µ!
    if (!ownedPets.unicorn && Math.random() < 1/10) { // 1 –∫ 10 ‚Äî –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–Ω—Å
        ownedPets.unicorn = true;
        updatePetsCollection();
        showNotification('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª —Ä–µ–¥–∫–∏–π –ø–∏—Ç–æ–º–µ—Ü: –ï–¥–∏–Ω–æ—Ä–æ–≥ ü¶Ñ');
    }

    state.totalClicks++;
    checkAchievements(state);
    checkSkinsAchievements();
}));

// –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–∞
document.getElementById('upgrade-btn').onclick = autoSaveWrap(function() {
    if (coins < 10) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 10;
    clickPower++;
    updateUI();
    showNotification('–ö–ª–∏–∫ —É–ª—É—á—à–µ–Ω! +' + clickPower + ' –∑–∞ –∫–ª–∏–∫');

    state.upgrades++;
    checkAchievements(state);
});

let autoclickTimer = null;
let autoclickTimeLeft = 0;
let autoclickTimerInterval = null;

function updateAutoclickTimerUI() {
    const timerDiv = document.getElementById('autoclick-timer');
    if (autoclick && autoclickTimeLeft > 0) {
        timerDiv.textContent = `–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: ${autoclickTimeLeft} —Å–µ–∫.`;
    } else {
        timerDiv.textContent = '';
    }
}

// –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –Ω–∞ –≤—Ä–µ–º—è
document.getElementById('autoclick-btn').onclick = autoSaveWrap(function() {
    if (autoclick) return showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!');
    if (coins < 50) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 50;
    autoclick = true;
    autoclickTimeLeft = 60;
    updateUI();
    updateAutoclickTimerUI();
    showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥!');
    document.getElementById('autoclick-btn').disabled = true;

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    window._autoclickerInterval = setInterval(() => {
        coins += clickPower;
        updateUI();
        saveGame();
    }, 1000);

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    autoclickTimerInterval = setInterval(() => {
        autoclickTimeLeft--;
        updateAutoclickTimerUI();
        if (autoclickTimeLeft <= 0) {
            clearInterval(window._autoclickerInterval);
            clearInterval(autoclickTimerInterval);
            autoclick = false;
            document.getElementById('autoclick-btn').disabled = false;
            updateAutoclickTimerUI();
            showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω!');
            saveGame();
        }
    }, 1000);
});

// –ú–∞–≥–∞–∑–∏–Ω –∫–æ—Ç–∏–∫–æ–≤
document.getElementById('buy-cat2').onclick = autoSaveWrap(function() {
    if (currentCat >= 2) return showNotification('–£–∂–µ –∫—É–ø–ª–µ–Ω–æ!');
    if (coins < 100) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 100;
    currentCat = 2;
    document.getElementById('cat-img').src = 'cat2.png';
    updateUI();
    showNotification('–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –∫–æ—Ç–∏–∫!');
});

// –î–æ–Ω–∞—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞)
document.getElementById('buy-cat3').onclick = autoSaveWrap(function() {
    showNotification('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ –¥–æ–Ω–∞—Ç!');
});

// –ë—É—Å—Ç–µ—Ä
document.getElementById('booster-btn').onclick = autoSaveWrap(function() {
    if (boosterActive) return showNotification('–ë—É—Å—Ç–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!');
    if (coins < 20) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 20;
    setBoosterActive(true);
    updateUI();
    boosterTimeout = setTimeout(() => setBoosterActive(false), 30000);
});

// –°–∫–∏–Ω—ã
let ownedSkins = { default: true, gold: false, achieve: false };
let currentSkin = 'default';

function updateCatSkin() {
    let img = 'cat1.png';
    if (currentSkin === 'gold') img = 'cat_gold.png';
    if (currentSkin === 'achieve') img = 'cat_achieve.png';
    document.getElementById('cat-img').src = img;
}

// –ü–æ–∫—É–ø–∫–∞ –∑–æ–ª–æ—Ç–æ–≥–æ —Å–∫–∏–Ω–∞
document.getElementById('skin-gold').onclick = autoSaveWrap(function() {
    if (ownedSkins.gold) {
        currentSkin = 'gold';
        updateCatSkin();
        showNotification('–ó–æ–ª–æ—Ç–æ–π –∫–æ—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω!');
        return;
    }
    if (coins < 1000) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 1000;
    ownedSkins.gold = true;
    currentSkin = 'gold';
    updateUI();
    updateCatSkin();
    showNotification('–ó–æ–ª–æ—Ç–æ–π –∫–æ—Ç–∏–∫ –∫—É–ø–ª–µ–Ω –∏ –≤—ã–±—Ä–∞–Ω!');
});

// –û–±—ã—á–Ω—ã–π —Å–∫–∏–Ω
document.getElementById('skin-default').onclick = autoSaveWrap(function() {
    currentSkin = 'default';
    updateCatSkin();
    showNotification('–û–±—ã—á–Ω—ã–π –∫–æ—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω!');
});

// –°–∫–∏–Ω –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
document.getElementById('skin-achieve').onclick = autoSaveWrap(function() {
    if (!ownedSkins.achieve) return showNotification('–°–∫–∏–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ 100 –∫–ª–∏–∫–æ–≤!');
    currentSkin = 'achieve';
    updateCatSkin();
    showNotification('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ-—Å–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!');
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∫–∏–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
function checkSkinsAchievements() {
    if (state.totalClicks >= 100) ownedSkins.achieve = true;
}

// –ü–∏—Ç–æ–º—Ü—ã
let ownedPets = { dog: false, bird: false, cat: false, unicorn: false };
let currentPet = null;

function updatePetInfo() {
    let name = 'no';
    if (currentPet === 'dog') name = 'Dog';
    if (currentPet === 'bird') name = 'Bird';
    if (currentPet === 'cat') name = 'Cat';
    if (currentPet === 'unicorn') name = 'Unicorn';
    document.getElementById('current-pet').textContent = name;
}

function updatePetImage() {
    const petImg = document.getElementById('pet-img');
    if (currentPet === 'dog') {
        petImg.src = 'pet_dog.png';
        petImg.alt = 'Dog';
        petImg.style.display = '';
    } else if (currentPet === 'bird') {
        petImg.src = 'pet_bird.png';
        petImg.alt = 'Bird';
        petImg.style.display = '';
    } else if (currentPet === 'cat') {
        petImg.src = 'pet_cat.png';
        petImg.alt = 'Cat';
        petImg.style.display = '';
    } else if (currentPet === 'unicorn') {
        petImg.src = 'pet_unicorn.png';
        petImg.alt = 'Unicorn';
        petImg.style.display = '';
    } else {
        petImg.style.display = 'none';
    }
}

// –ü–æ–∫—É–ø–∫–∞ —Å–æ–±–∞—á–∫–∏
document.getElementById('pet-dog').onclick = autoSaveWrap(function() {
    if (ownedPets.dog) {
        currentPet = 'dog';
        updatePetInfo();
        showNotification('–°–æ–±–∞—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞!');
        return;
    }
    if (coins < 500) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 500;
    ownedPets.dog = true;
    currentPet = 'dog';
    passiveIncome += 1;
    updateUI();
    updatePassiveUI();
    updatePetInfo();
    updatePetImage();
    showNotification('–°–æ–±–∞—á–∫–∞ –∫—É–ø–ª–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞! +1 –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥');
});

// –ü–æ–∫—É–ø–∫–∞ –ø—Ç–∏—á–∫–∏
document.getElementById('pet-bird').onclick = autoSaveWrap(function() {
    if (ownedPets.bird) {
        currentPet = 'bird';
        updatePetInfo();
        showNotification('–ü—Ç–∏—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞!');
        return;
    }
    if (coins < 800) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 800;
    ownedPets.bird = true;
    currentPet = 'bird';
    updateUI();
    updatePetInfo();
    updatePetImage();
    showNotification('–ü—Ç–∏—á–∫–∞ –∫—É–ø–ª–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞! +10% –∫ –∫–ª–∏–∫—É');
});

// –ü–æ–∫—É–ø–∫–∞ –∫–æ—Ç—ë–Ω–∫–∞
document.getElementById('pet-cat').onclick = autoSaveWrap(function() {
    if (ownedPets.cat) {
        currentPet = 'cat';
        updatePetInfo();
        showNotification('–ö–æ—Ç—ë–Ω–æ–∫ –≤—ã–±—Ä–∞–Ω!');
        return;
    }
    if (coins < 1200) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 1200;
    ownedPets.cat = true;
    currentPet = 'cat';
    updateUI();
    updatePetInfo();
    updatePetImage();
    showNotification('–ö–æ—Ç—ë–Ω–æ–∫ –∫—É–ø–ª–µ–Ω –∏ –≤—ã–±—Ä–∞–Ω! +5% –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É');
});

// –°–Ω—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞
document.getElementById('pet-none').onclick = autoSaveWrap(function() {
    currentPet = null;
    updatePetInfo();
    showNotification('–ü–∏—Ç–æ–º–µ—Ü —Å–Ω—è—Ç!');
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞:
setInterval(function() {
    let passive = passiveIncome;
    if (currentPet === 'cat') passive = Math.floor(passive * 1.05);
    if (currentPet === 'dog') passive += 1;
    if (currentPet === 'unicorn') passive += 5;
    if (passive > 0) {
        coins += passive;
        updateUI();
        saveGame();
    }
}, 1000);

// –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ ‚Äî 1 –∫ 2000 –∫–ª–∏–∫–æ–≤
if (!ownedPets.unicorn && Math.random() < 1/10) {
    ownedPets.unicorn = true;
    updatePetsCollection();
    showNotification('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª —Ä–µ–¥–∫–∏–π –ø–∏—Ç–æ–º–µ—Ü: –ï–¥–∏–Ω–æ—Ä–æ–≥ ü¶Ñ');
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
function saveGame() {
    const saveData = {
        coins,
        clickPower,
        autoclick,
        currentCat,
        xp,
        level,
        unlockedAchievements,
        state,
        passiveIncome, // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        ownedSkins,
        currentSkin,
        ownedPets,
        currentPet
    };
    localStorage.setItem('catclickerSave', JSON.stringify(saveData));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function loadGame() {
    const data = localStorage.getItem('catclickerSave');
    if (data) {
        const save = JSON.parse(data);
        coins = save.coins ?? 0;
        clickPower = save.clickPower ?? 1;
        autoclick = save.autoclick ?? false;
        currentCat = save.currentCat ?? 1;
        xp = save.xp ?? 0;
        level = save.level ?? 1;
        unlockedAchievements = save.unlockedAchievements ?? [];
        Object.assign(state, save.state || {});
        passiveIncome = save.passiveIncome ?? 0; // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        ownedSkins = save.ownedSkins ?? { default: true, gold: false, achieve: false };
        currentSkin = save.currentSkin ?? 'default';
        ownedPets = save.ownedPets ?? { dog: false, bird: false, cat: false, unicorn: false };
        currentPet = save.currentPet ?? null;
        updateCatSkin();
        updatePetInfo();
        updatePetImage();
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—Ç–∏–∫–∞
        document.getElementById('cat-img').src = `cat${currentCat}.png`;
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –±—ã–ª –∫—É–ø–ª–µ–Ω ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
        if (autoclick && !window._autoclickerStarted) {
            window._autoclickerStarted = true;
            setInterval(() => {
                coins += clickPower;
                updateUI();
                saveGame();
            }, 1000);
        }
    }
    updateUI();
    updateLevelUI();
    renderAchievements();
    updatePassiveUI(); // –¥–æ–±–∞–≤–ª–µ–Ω–æ
    updatePetsCollection();
}

function updateDailyBonusBar() {
    const now = Date.now();
    const lastBonus = Number(localStorage.getItem('catclickerLastBonus') || 0);
    const msInDay = 86400000;
    const elapsed = now - lastBonus;
    let percent = Math.min(100, (elapsed / msInDay) * 100);
    document.getElementById('daily-bonus-progress').style.width = percent + '%';

    let timerDiv = document.getElementById('daily-bonus-timer');
    if (elapsed >= msInDay) {
        timerDiv.textContent = '–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω!';
    } else {
        const left = msInDay - elapsed;
        const h = Math.floor(left / 3600000);
        const m = Math.floor((left % 3600000) / 60000);
        const s = Math.floor((left % 60000) / 1000);
        timerDiv.textContent = `–î–æ –±–æ–Ω—É—Å–∞: ${h}—á ${m}–º ${s}—Å`;
    }
}

function giveDailyBonus() {
    const now = Date.now();
    const lastBonus = Number(localStorage.getItem('catclickerLastBonus') || 0);
    const msInDay = 86400000;
    if (now - lastBonus > msInDay) {
        const bonus = 50 + Math.floor(Math.random() * 51); // 50-100 –º–æ–Ω–µ—Ç
        coins += bonus;
        updateUI();
        showNotification(`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +${bonus} –º–æ–Ω–µ—Ç!`);
        localStorage.setItem('catclickerLastBonus', now);
        saveGame();
    }
    updateDailyBonusBar();
    setInterval(updateDailyBonusBar, 1000);
}

// –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–≥—Ä—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
function autoSaveWrap(fn) {
    return function(...args) {
        const result = fn.apply(this, args);
        saveGame();
        return result;
    }
}

document.getElementById('upgrade-btn').onclick = autoSaveWrap(function() {
    if (coins < 10) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 10;
    clickPower++;
    updateUI();
    showNotification('–ö–ª–∏–∫ —É–ª—É—á—à–µ–Ω! +' + clickPower + ' –∑–∞ –∫–ª–∏–∫');

    state.upgrades++;
    checkAchievements(state);
});

document.getElementById('autoclick-btn').onclick = autoSaveWrap(function() {
    if (autoclick) return showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!');
    if (coins < 50) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 50;
    autoclick = true;
    autoclickTimeLeft = 60;
    updateUI();
    updateAutoclickTimerUI();
    showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥!');
    document.getElementById('autoclick-btn').disabled = true;

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    window._autoclickerInterval = setInterval(() => {
        coins += clickPower;
        updateUI();
        saveGame();
    }, 1000);

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    autoclickTimerInterval = setInterval(() => {
        autoclickTimeLeft--;
        updateAutoclickTimerUI();
        if (autoclickTimeLeft <= 0) {
            clearInterval(window._autoclickerInterval);
            clearInterval(autoclickTimerInterval);
            autoclick = false;
            document.getElementById('autoclick-btn').disabled = false;
            updateAutoclickTimerUI();
            showNotification('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω!');
            saveGame();
        }
    }, 1000);
});

document.getElementById('buy-cat2').onclick = autoSaveWrap(function() {
    if (currentCat >= 2) return showNotification('–£–∂–µ –∫—É–ø–ª–µ–Ω–æ!');
    if (coins < 100) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 100;
    currentCat = 2;
    document.getElementById('cat-img').src = 'cat2.png';
    updateUI();
    showNotification('–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –∫–æ—Ç–∏–∫!');
});

document.getElementById('buy-cat3').onclick = autoSaveWrap(function() {
    showNotification('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ –¥–æ–Ω–∞—Ç!');
});

document.getElementById('reset-btn').onclick = function() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')) return;

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    coins = 0;
    clickPower = 1;
    autoclick = false;
    currentCat = 1;
    xp = 0;
    level = 1;
    passiveIncome = 0;
    unlockedAchievements = [];
    state = {
        coins: 0,
        totalClicks: 0,
        upgrades: 0,
    };
    boosterActive = false;
    ownedSkins = { default: true, gold: false, achieve: false };
    currentSkin = 'default';
    ownedPets = { dog: false, bird: false, cat: false, unicorn: false };
    currentPet = null;

    localStorage.clear();
    location.reload();
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
function updatePassiveUI() {
    document.getElementById('passive-value').textContent = passiveIncome;
}

// –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
document.getElementById('passive-btn').onclick = autoSaveWrap(function() {
    if (coins < 25) return showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    coins -= 25;
    passiveIncome++;
    updateUI();
    updatePassiveUI();
    showNotification('–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω!');
});

// –ü–∞—Å—Å–∏–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(function() {
    if (passiveIncome > 0) {
        coins += passiveIncome;
        updateUI();
        saveGame();
    }
}, 1000);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadGame();
giveDailyBonus();

if (window.Telegram && Telegram.WebApp) {
    Telegram.WebApp.ready();
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram.WebApp.initData, Telegram.WebApp.sendData –∏ —Ç.–¥.
}

function updatePetsCollection() {
    document.getElementById('coll-dog').style.opacity = ownedPets.dog ? '1' : '0.3';
    document.getElementById('coll-bird').style.opacity = ownedPets.bird ? '1' : '0.3';
    document.getElementById('coll-cat').style.opacity = ownedPets.cat ? '1' : '0.3';
    document.getElementById('coll-unicorn').style.opacity = ownedPets.unicorn ? '1' : '0.3';

    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const rewardDiv = document.getElementById('collection-reward');
    if (ownedPets.dog && ownedPets.bird && ownedPets.cat) {
        rewardDiv.textContent = '–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞! –ë–æ–Ω—É—Å: +2 –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É';
        if (!window._collectionRewardGiven) {
            passiveIncome += 2;
            updatePassiveUI();
            window._collectionRewardGiven = true;
            showNotification('–ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é: +2 –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É!');
            saveGame();
        }
    } else {
        rewardDiv.textContent = '';
        window._collectionRewardGiven = false;
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.onclick = function() {
        document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        const tab = btn.getAttribute('data-tab');
        document.querySelectorAll('.tab').forEach(t => t.style.display = 'none');
        document.getElementById('tab-' + tab).style.display = 'block';
    }
});
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
document.querySelector('.nav-btn[data-tab="game"]').classList.add('active');
document.getElementById('tab-game').style.display = 'block';

let lastTouchEnd = 0;
document.addEventListener('touchend', function(event) {
    const now = Date.now();
    if (now - lastTouchEnd <= 300) {
        event.preventDefault();
    }
    lastTouchEnd = now;
}, false);

document.addEventListener('gesturestart', function (e) {
    e.preventDefault();
});

// –ü–æ–∫—É–ø–∫–∞/–≤—ã–±–æ—Ä –µ–¥–∏–Ω–æ—Ä–æ–≥–∞
document.getElementById('pet-unicorn').onclick = autoSaveWrap(function() {
    if (!ownedPets.unicorn) return showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞!');
    currentPet = 'unicorn';
    updatePetInfo();
    updatePetImage();
    updatePassiveUI();
    updateUI();
    updatePetsCollection();
    showNotification('–ï–¥–∏–Ω–æ—Ä–æ–≥ –≤—ã–±—Ä–∞–Ω! +5 –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É');
});